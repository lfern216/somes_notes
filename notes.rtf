
download the 'oracle sql developer' or mysqlworkbench to manage the database


normal status: localhost:8080/
administration for glasshfish:  localhost:4848/


to download spring framework:
		(download a zip version)
		-https://repo.spring.io/release/org/springframework/spring/

		-download the latest version of commons-logging-2..... jar
		(http://commons.apache.org/proper/commons-logging/download_logging.cgi)

	(In eclipse, create a new user library and add external library with all these jars)	


JDBC:

	-download the jdbc driver for mysql in mysql.com/products/connector


		Steps:
		1) Create connection
      Connection conn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/database_name","username","password")

		2) Create Statement
		Statement stat = conn.createStatement();

		3) Execute Query
		ResultSet result = stat.executeQuery("SELECT * FROM employee_table");

		4) Process the result set
		while(result.next()){
			//you can get info from db by doing:
			some_array.add(result.getString("first_name"));
		}

public static Connection getConnection() throws Exception{

		try{

			String driver = "com.mysql.jdbc.Driver";
			String url = "jdbc:mysql://localhost:3306/database_name"
			String username = "javad"
			String password = "123"
			Class.forName(driver);
			
			Connection conn = DriverManager.getConnection(url,username,password)
			return conn;
		}catch(Exception e){}
}

Prepared Statements:

PreparedStament stat = conn.prepareStatement("SELECT * FROM employees WHERE
					SALARY > ? AND department = ?");

		stat.setDouble(1, 8000);
		stat.setString(2, "Legal");
		(the program will replace the ? for 8000 and the last ? for Legal


To insert query:
			String sql = "insert into employee_table " 
			+ " (last_name, first_name, email) "
			+ " values ('Brown', 'David', 'david@gj.com') ";

	followed by stat.executeUpdate(sql);


To Update query:
			String sql = "update employee_table " 
			+ " set email='demo@gdhgh' "
			+ " where id=9";
			 
		
		
		
	------------------- JSF ----------------------------
	
	Ex: 1.1:
	
	     @ManagedBean
	   public class Hello.Controller {
		public String showHello(){
			return "hello from managed bean";
		}
	   }
	   
	   
	   In index.xhtml
	   <html> 
	   	(all imports)
			
		<h:head>
		</h:head>
		<h:body>
		     #{helloController.showHello()}
		</h:body>
	   </html> 
	
	Note: In @ManagedBean, if you dont specify the name as follows like this @ManagedBean(name="...)" then
	the name is the same as the class but having the first letter as LOWERCASE. This is why, we didn't specify 
	and wrote #{helloController.showHello()}
	
	
	
	Ex 1.2: 
	
	
	<welcome-file-list>
	     <welcome-file> index.xhtml> </welcome-file>
	</welcome-file-list>
	
	Note: welcomefile is used to set the default file. So localhost/8080 would display the index.xhtml.
	
